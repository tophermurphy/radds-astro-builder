---
import type { SerializedLexicalNode } from "./types";

import PLexicalInner from "./PLexicalInner.astro";
import PButton from "../PButton.astro";

// Text node formatting
export const IS_BOLD = 1;
export const IS_ITALIC = 1 << 1;
export const IS_STRIKETHROUGH = 1 << 2;
export const IS_UNDERLINE = 1 << 3;
export const IS_CODE = 1 << 4;
export const IS_SUBSCRIPT = 1 << 5;
export const IS_SUPERSCRIPT = 1 << 6;
export const IS_HIGHLIGHT = 1 << 7;

export const WrapObject = [
  { test: IS_SUPERSCRIPT, component: "sup" },
  { test: IS_SUBSCRIPT, component: "sub" },
  { test: IS_CODE, component: "code" },
  { test: IS_UNDERLINE, component: "span", style: "underline" },
  { test: IS_STRIKETHROUGH, component: "span", style: "line-through" },
  { test: IS_ITALIC, component: "em" },
  { test: IS_BOLD, component: "strong" },
];

interface Props {
  content: SerializedLexicalNode[];
}

const { content } = Astro.props;
---

{
  !content.length
    ? ""
    : content.map((item, i) => {
        const { format, text, type, fields, children: NodeChildren } = item;
        if (type === "linebreak") {
          return <br />;
        } else if (type === "link") {
          console.log("link item", item.fields.doc.value);
          const linkUrl =
            fields.linkType === "internal"
              ? "/" + fields.doc.value.slug || "/"
              : fields.url || "/";

          if (fields && fields.button === true) {
            const internalText =
              NodeChildren?.reduce((str, item) => {
                return (str += item?.text ?? "");
              }, "") || "";
            const color = fields?.button_options?.color?.name ?? "primary";
            return (
              <PButton
                color={color}
                style={fields.button_options.style === "secondary" ? "outline" : "filled"}
                url={linkUrl}
                label={internalText}
                target={fields.newTab ? "_blank" : "_self"}
              />
            );
          } else {
            return (
              <a href={linkUrl}>
                <PLexicalInner children={item} />
              </a>
            );
          }
        } else if (type === "text") {
          return <PLexicalInner children={item} />;
        } else {
          return null;
        }
      })
}
