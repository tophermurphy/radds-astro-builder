---
import type { Node } from "./types";
interface Props {
    children: Node;
}

const { children } = Astro.props;
const { format, text = "", fields } = children;

// Text node formatting
export const IS_BOLD = 1;
export const IS_ITALIC = 1 << 1;
export const IS_STRIKETHROUGH = 1 << 2;
export const IS_UNDERLINE = 1 << 3;
export const IS_CODE = 1 << 4;
export const IS_SUBSCRIPT = 1 << 5;
export const IS_SUPERSCRIPT = 1 << 6;
export const IS_HIGHLIGHT = 1 << 7;

export const WrapObject = [
  { test: IS_SUPERSCRIPT, component: "sup"},
  { test: IS_SUBSCRIPT, component: "sub"},
  { test: IS_CODE, component: "code" },
  { test: IS_UNDERLINE, component: "span", style: "text-decoration: underline;" },
  { test: IS_STRIKETHROUGH, component: "span", style: "text-decoration: line-through;" },
  { test: IS_ITALIC, component: "em" },
  { test: IS_BOLD, component: "strong" },
];
let fragment = ""
if(!format){
  fragment = text;
} else {
  WrapObject.forEach(el => {
    if(!fragment){
      if(format & el.test){
        fragment += `<${el.component}`;
        if( el.style ){
          fragment += ` style="${el.style}" `;
        }
        fragment += `>${text}</${el.component}>`;
      } else {
        fragment = text;
      }
    } else {
      if(format & el.test){
        let start = `<${el.component}`;
        if( el.style ){
          start += ` style="${el.style}" `;
        }
        fragment = `${start}>${fragment}</${el.component}>`;
      }
    }
  })
}
---
<Fragment set:html={fragment} />