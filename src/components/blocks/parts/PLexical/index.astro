---
import type { LexicalEditor } from "./types";
import PLexicalParse from "./PLexicalParse.astro";
import PLexicalMedia from "./PLexicalMedia.astro";

interface Props {
  textEditor: LexicalEditor;
}
const { textEditor } = Astro.props;
const children = textEditor?.root?.children || [];

//TODO: Working for now. Check back when Lexical and Payload is stable.
---

{
  children.length &&
    children.map((element, i) => {
      const { type, indent, format = "left" } = element;
      const classnames = `text-${format}`;
      const marginStyle = {marginLeft: `${indent}rem;`};
      switch (type) {
        case "heading":
          const Title = element.tag;
          return (
            <Title class={classnames} style={marginStyle}>
              <PLexicalParse content={element.children} />
            </Title>
          );
        case "paragraph":
          return (
            <p class={classnames} style={marginStyle}>
              <PLexicalParse content={element.children} />
            </p>
          );
          case "list":
            const Comopnent = element.tag
            return(
              <Comopnent class={classnames} style={marginStyle}>
                { element.children.map(item => (
                  <li> 
                    <PLexicalParse content={item.children || []} />
                    </li>
                ))}
                </Comopnent>
            );
        case "upload":
          return (
            <div class={classnames} style={marginStyle}>
              <PLexicalMedia content={element} />
              </div>
          );
        case "quote":
          return (
            <blockquote class={classnames} style={marginStyle}>
              <PLexicalParse content={element.children} />
            </blockquote>
          );
        default:
          return (
            <p class={classnames} style={marginStyle}>
              <PLexicalParse content={element.children} />
            </p>
          );
      }
    })
}
