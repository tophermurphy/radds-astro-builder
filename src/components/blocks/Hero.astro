---
import type { BlockHero } from "@src/types/payload-types";
import { Image as AImage } from "astro:assets";
import PLexical from "./parts/PLexical/index.astro";

// TODO: Text Position
//?TODO: Image background shows when slides are not equal height
//?TODO: Section Options - padding implement

interface Props {
  content: BlockHero;
}
const {
  content: {
    image,
    textEditor,
    min_height = 800,
    min_height_mobile = 400,
    text_width = 30,
    text_location = "center_left",
    image_opacity = 100,
    gradient_direction = "right",
    gradient_opacity = 80,
    gradient_width = 100,
  },
} = Astro.props;

const prefix = import.meta.env.MEDIAPATH || "/media/";

const alignMap = {
  top: "flex-start",
  left: "flex-start",
  center: "center",
  bottom: "flex-end",
  right: "flex-end",
};

const imageProps = {
  src: typeof image === "string" ? "" : prefix + image.filename,
  alt: "",
  style: {
    opacity: `${(image_opacity || 100) * 0.01}`,
  },
};

const [align, justify] = (text_location || "center_left").split("_");

const wrapStyles = {
  alignItems: alignMap[align as keyof typeof alignMap],
  justifyContent: alignMap[justify as keyof typeof alignMap],
};
---

<div class="hero-wrap">
  {
    textEditor && (
      <div class="hero-text" style={{ width: `${text_width}%` }}>
        <PLexical textEditor={textEditor as any} />
      </div>
    )
  }
  <div class="hero-gradient"></div>
  <AImage class="hero-bg-image" {...imageProps} inferSize />
</div>

<style
  lang="scss"
  define:vars={{
    min_height: `${min_height}px`,
    min_height_mobile: `${min_height_mobile}px`,
    align_hero: wrapStyles.alignItems,
    justify_hero: wrapStyles.justifyContent,
    gradient_direction,
    gradient_opacity: `${(gradient_opacity || 80) * 0.01}`,
    gradient_width: `${gradient_width}%`,
  }}
>


  $hero-padding-x: 2rem;
  $hero-padding-y: 2rem;

  .hero-wrap {
    min-height: var(--min_height);
    align-items: var(--align_hero);
    justify-content: var(--justify-hero);
    position: relative;
    width: 100%;
    height: 100%;
    z-index: 0;
    display: flex;
    padding: $hero-padding-x $hero-padding-y;
    color: $white;
    .hero-bg-image {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      object-fit: cover;
      object-position: center;
      z-index: -1;
    }
    @include media-breakpoint-down("md") {
      min-height: var(--min_height_mobile);
    }
  }
  .hero-text {
    z-index: 10;
  }
  .hero-gradient {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: var(--gradient_opacity);
    top: 0;
    left: 0;
    z-index: 2;
    background-image: linear-gradient(
      to var(--gradient_direction),
      rgba(0, 0, 0, 1),
      rgba(0, 0, 0, 0) var(--gradient_width)
    );
  }
</style>
