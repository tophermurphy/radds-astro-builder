---
import type { BlockImage } from "src/types/payload-types";
import { Image as AImage, type RemoteImageProps }  from 'astro:assets';
import type { Media } from "src/types/payload-types";

interface Props {
  content: BlockImage;
}

const { content } = Astro.props;
const { image, format, size, fill } = content;
const media = image as Media;

const justifyMap = {
  left: "justify-content-start",
  center: "justify-content-center",
  right: "justify-content-end",
};
const alignMap = {
  "flex-start": "align-items-start",
  "flex-end": "align-items-end",
  center: "align-items-center",
};

const justifyClass = justifyMap[size?.justify ?? 'center'];
const alignClass = alignMap[size?.align ?? 'center'];
const maxHeight = format == 'fill' && fill && fill['max-height'] ? `${fill['max-height']}px` : 'none';

const prefix = import.meta.env.MEDIAPATH || '/media/';

const mediaHeight = media.height || 800;

let imageProps: RemoteImageProps = {
  loading: 'eager',
  format: 'webp',
  src: prefix + media.filename,
  alt: media.alt  || "",
  width: format === 'fill' ? 800 : size?.width ?? 500,
  height: format === 'fill' ? media.width || 800 / mediaHeight * mediaHeight : size?.width ?? 200,
  densities: [1, 1.5, 2]
}

---

<div
  class:list={[
    "image-wrap",
    "d-flex",
    "w-100",
    "h-100",
    { [`${justifyClass}`]: format === 'size' },
    { [`${alignClass}`]: format === 'size' },
    { "--size": format === 'size' },
    { "--fill": format === 'fill' }
  ]} >
  {
    media && (
      <AImage {...imageProps}  />
    )
  }
</div>

<style lang="scss" define:vars={{ 
  maxHeight, 
  xPos: fill?.['x-pos'] ?? 'center', 
  yPos: fill?.['y-pos'] ?? 'top'
  }} >

  .image-wrap {
   > img {
    max-width: 100%;
   }
    &.--size > img {
      object-fit: contain;
    }
    &.--fill > img {
      object-fit: cover;
      width: 100%;
      min-height: 100%;
      max-height: var(--maxHeight);
      object-position: var(--xPos) var(--yPos);
    }
  }
</style>