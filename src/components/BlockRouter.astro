---
import type {
  BlockAccordion,
  BlockButtons,
  BlockCard,
  BlockHeading,
  BlockParagraph,
  BlockTextEditor,
  BlockDivider,
  BlockImage,
  BlockQuote,
  BlockTabs,
} from "src/types/payload-types";

import type {  HTMLAttributes } from "astro/types";

import Accordion from "./blocks/Accordion.astro";
import Buttons from "./blocks/Buttons.astro";
import Card from "./blocks/Card.astro";
import Divider from "./blocks/Divider.astro";
import Heading from "./blocks/Heading.astro";
import Image from "./blocks/Image.astro";
import Paragraph from "./blocks/Paragraph.astro";
import Quote from "./blocks/Quote.astro";
import Tabs from "./blocks/Tabs.astro";
import TextEditor from "./blocks/TextEditor.astro";
import { BlockList } from "net";
import type { JsxAttribute } from "typescript";

type Block =
  | BlockHeading
  | BlockParagraph
  | BlockAccordion
  | BlockCard
  | BlockButtons
  | BlockTextEditor
  | BlockDivider
  | BlockImage
  | BlockQuote
  | BlockTabs;

export const BlockMap = {
  paragraph: Paragraph,
  heading: Heading,
  accordion: Accordion,
  buttons: Buttons,
  card: Card,
  textEditor: TextEditor,
  divider: Divider,
  image: Image,
  quote: Quote,
  tabs: Tabs,
};

interface DivProps extends HTMLAttributes<'div'> {
  // Add your style properties here
  style?: {
    [key: string]: string | undefined;
    width?: string;

  };
  // You can add more specific style properties if needed
  className?: string;
}

interface Props {
  blocks: Block[];
  classNames?: string;
  width?: string;
}

const { blocks, classNames, width } = Astro.props;
---

{
  blocks &&
    blocks.map((block) => {
      if (!block.blockType || !BlockMap[block.blockType]) return;
      const classString = `block __${block.blockType}`;
      let divProps: DivProps = {
        class: classNames ? classString + " " + classNames : classString,
      };

      if( width ){
        divProps.style = divProps.style ?? {};
        divProps.style.width = width;
      }

      const Component = BlockMap[block.blockType] as any;
      return (
        <div {...divProps}>
          <Component content={block}  />
        </div>
      );
    })
}
