---
import type { SectionCarousel } from "src/types/payload-types";

import "@bootstrap/scss/_carousel.scss";
import "@bootstrap/scss/_buttons.scss";

import { BlockMap } from "../BlockRouter.astro";
import { generateUUID } from "@src/lib/utilities";

import ChevronLeft from "@src/icons/chevron_left.svg?raw";
import ChevronRight from "@src/icons/chevron_right.svg?raw";

// TODO: Rethink Section Options for carousel;
// ? No padding external

interface Props {
  section: SectionCarousel;
}

const { section } = Astro.props;
const blocksLength = section.blocks?.length || 0;
const carouselID = `carousel-${section.id || generateUUID()}`;
const { controls, mobile_controls } = section.carousel_options;
const arrows = {
  desktop: controls.includes("arrows"),
  mobile: mobile_controls.includes("arrows"),
};
const indicators = {
  desktop: controls.includes("indicators"),
  mobile: mobile_controls.includes("indicators"),
};
---

<section class="section __carousel">
  <div
    id={carouselID}
    class:list={[
      "carousel",
      "slide",
      { "__arrows-all": arrows.desktop && arrows.mobile },
      { "__arrows-desktop": arrows.desktop && !arrows.mobile },
      { "__arrows-mobile": arrows.mobile && !arrows.desktop },
      { "__indicators-all": indicators.desktop && indicators.mobile },
      { "__indicators-desktop": indicators.desktop && !indicators.mobile },
      { "__indicators-mobile": indicators.mobile && !indicators.desktop },
    ]}
  >
    {
      blocksLength && (indicators.desktop || indicators.mobile) && (
        <div
          class:list={[
            "carousel-indicators",
            {
              "view-desktop-only": indicators.desktop && !indicators.mobile,
              "view-mobile-only": indicators.mobile && !indicators.desktop,
            },
          ]}
        >
          {[...Array(blocksLength)].map((_, i) => (
            <button
              type="button"
              class:list={{ active: i === 0 }}
              data-bs-target={`#${carouselID}`}
              data-bs-slide-to={i}
              aria-current={!!(i === 0)}
              aria-label={`Slide ${i}`}
            />
          ))}
        </div>
      )
    }
    <div class="carousel-inner">
      {
        section.blocks &&
          section.blocks.map((block, i) => {
            const Component = BlockMap[block.blockType] as any;
            return (
              <div class:list={["carousel-item", { active: i === 0 }]}>
                <Component content={block} />
              </div>
            );
          })
      }
    </div>
    {
      blocksLength && (arrows.desktop || arrows.mobile) && (
        <div
          class:list={[
            "carousel-arrows",
            {
              "view-desktop-only": arrows.desktop && !arrows.mobile,
              "view-mobile-only": arrows.mobile && !arrows.desktop,
            },
          ]}
        >
          <button
            class="carousel-control-prev"
            type="button"
            data-bs-target={`#${carouselID}`}
            data-bs-slide="prev"
          >
            <span class="carousel-arrow">
              <Fragment set:html={ChevronLeft} />
            </span>
            <span class="visually-hidden">Previous</span>
          </button>
          <button
            class="carousel-control-next"
            type="button"
            data-bs-target={`#${carouselID}`}
            data-bs-slide="next"
          >
            <span class="carousel-arrow">
              <Fragment set:html={ChevronRight} />
            </span>
            <span class="visually-hidden">Next</span>
          </button>
        </div>
      )
    }
  </div>
</section>

<style lang="scss" is:global>
  $arrow-size: 32px;
  $control-width: $arrow-size * 1.5;
  $padding-width-arrows: $arrow-size * 1.75;

  .carousel {
    &.__arrows-all .hero-wrap {
      padding-left: $padding-width-arrows;
      padding-right: $padding-width-arrows;
    }
    &.__arrows-desktop .hero-wrap {
      @include media-breakpoint-up("md") {
        padding-left: $padding-width-arrows;
        padding-right: $padding-width-arrows;
      }
    }
    &.__arrows-mobile .hero-wrap {
      @include media-breakpoint-down("md") {
        padding-left: $padding-width-arrows;
        padding-right: $padding-width-arrows;
      }
    }
  }

  .carousel-control-prev,
  .carousel-control-next {
    width: $control-width;
  }
  .carousel-arrow {
    fill: #000;
    width: $arrow-size;
    height: $arrow-size;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.6);
    display: flex;
    justify-content: center;
    align-items: center;
  }
</style>

<script>
  import "@bootstrap/js/src/carousel";
</script>
